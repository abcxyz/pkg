# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'create-tag'
on:
  workflow_call:
    inputs:
      tag:
        description: 'The name of the tag to be created.'
        type: 'string'
        required: true
      annotated_tag:
        description: 'Whether it will be an annotated tag in Git.'
        type: 'boolean'
        default: true
        required: false
      # Set the branch and message defaults when declaring environment variables
      # as the default values in here may not be considered when the calling
      # workflow provided a none input, likely a bug: https://github.com/actions/runner/issues/2907.
      branch:
        description: 'The branch of the head commit to create tag on. Default is the default branch of the calling repository.'
        type: 'string'
        required: false
      message:
        description: 'Message for the tag. Default is the tag name.'
        type: 'string'
        required: false
      deployment_environment:
        description: 'The environment with protection rules, see reference https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment.'
        type: 'string'
        required: true
      token_minter_wif_provider:
        description: 'The full identifier of the Workload Identity Provider, including the project number, pool name, and provider name.'
        type: 'string'
        required: true
      token_minter_wif_service_account:
        description: 'Email address or unique identifier of the Google Cloud service account for which to generate credentials.'
        type: 'string'
        required: true
      token_minter_service_audience:
        description: 'Cloud Run audience for the production github-token-minter service.'
        type: 'string'
        required: true
      token_minter_service_url:
        description: 'URL for the production github-token-minter service.'
        type: 'string'
        required: true

env:
  TAG: '${{ inputs.tag }}'
  BRANCH: '${{ inputs.branch || github.event.repository.default_branch }}'
  ANNOTATED_TAG: '${{ inputs.annotated_tag }}'
  MESSAGE: '${{ inputs.message || inputs.tag }}'

jobs:
  print-inputs:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'job summary'
        run: |
          echo "### Inputs" >> $GITHUB_STEP_SUMMARY
          echo "- tag: ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "- branch: ${BRANCH}" >> $GITHUB_STEP_SUMMARY
          echo "- annotated tag: ${ANNOTATED_TAG}" >> $GITHUB_STEP_SUMMARY
          echo "- message: ${MESSAGE}" >> $GITHUB_STEP_SUMMARY

  create-tag:
    runs-on: 'ubuntu-latest'
    needs: 'print-inputs'
    # Only running the job when the triggering branch is the default branch.
    if: '${{ github.ref_name == github.event.repository.default_branch }}'
    # Use environment here since calling workflow does not support it, see ref:
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow.
    environment: '${{ inputs.deployment_environment }}'
    outputs:
      result: '${{ steps.create-tag.outputs.result }}'
    steps:
      - name: 'Mint Token'
        id: 'mint-token'
        uses: 'abcxyz/github-token-minter/.github/actions/mint-token@af661f898c6b0cda46dcaadd8299fb1eab264975' # ratchet:abcxyz/github-token-minter/.github/actions/mint-token@main
        with:
          wif_provider: '${{ inputs.token_minter_wif_provider }}'
          wif_service_account: '${{ inputs.token_minter_wif_service_account }}'
          service_audience: '${{ inputs.token_minter_service_audience }}'
          service_url: '${{ inputs.token_minter_service_url }}'
          requested_permissions: |-
            {
              "repositories": ["${{ github.event.repository.name }}"],
              "permissions": {
                "contents": "write"
              }
            }
      - id: 'create-tag'
        name: 'Create Tag'
        uses: 'actions/github-script@98814c53be79b1d30f795b907e553d8679345975' # ratchet:actions/github-script@v6
        with:
          github-token: '${{ steps.mint-token.outputs.token }}'
          retries: '3'
          result-encoding: 'string'
          script: |+
            const branch = process.env.BRANCH
            const tag = process.env.TAG
            const annotatedTag = process.env.ANNOTATED_TAG
            const message = process.env.MESSAGE

            // TODO(#215): Once prevent self-review is supported by GitHub, we can remove this condition.
            if (branch != '${{ github.event.repository.default_branch }}') {
              core.setFailed(`branch (${branch}) is not the repository default branch (${{ github.event.repository.default_branch }}).`)
              return
            }

            let sha = '${{ github.sha }}'
            // If the input branch is not the branch of the calling workflow,
            // get the sha of input branch instead.
            if (branch !== '${{ github.ref_name }}') {
              // Get branch.
              const branchToTag = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch,
              })
              // Branch returns the latest commit info. See schema:
              // https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#get-a-branch
              sha = branchToTag['data']['commit']['sha']
            }

            await github.rest.git.createTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag,
              object: sha,
              type: 'commit',
              message: message,
            });

            if (annotatedTag === 'true') {
              // Create a reference for annotated tag. See reference:
              // https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#create-a-tag-object
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: sha,
              })
              return `Created annotated tag (${tag}), branch (${branch}), commit (${sha}), message(${message}).`
            }

            return `Created lightweight tag (${tag}), branch (${branch}), commit (${sha}), message(${message}).`

  print-outputs:
    runs-on: 'ubuntu-latest'
    needs: 'create-tag'
    steps:
      - name: 'job summary'
        run: |
          echo "### Outputs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.create-tag.outputs.result }}" >> $GITHUB_STEP_SUMMARY
