name: 'terraform-lint'

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'The version of Terraform to install and use.'
        type: 'string'
        required: true
      directory:
        description: 'The directory upon which to lint Terraform configurations.'
        type: 'string'
        required: true

env:
  TF_IN_AUTOMATION: 'true'

jobs:
  # lint finds all Terraform nested directories within the given parent
  # directory and runs Terraform formatting and validation checks.
  #
  # Do not change this job name. Job names are used as identifiers in status
  # checks, and changing this name will cause status checks to fail.
  lint:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b' # ratchet:actions/checkout@v3

      - name: 'Setup Terraform'
        uses: 'hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1' # ratchet:hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: '${{ inputs.terraform_version }}'

      - name: 'Check formatting'
        shell: 'bash'
        working-directory: '${{ inputs.directory }}'
        run: |-
          terraform fmt -recursive -check -diff

      - id: 'checkout pkg repo'
        uses: 'actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c' # ratchet:actions/checkout@v3
        with:
          repository: 'abcxyz/pkg'
          path: '${{ runner.temp }}/abcxyz-pkg'

      - id: 'setup-go'
        uses: 'actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568' # ratchet:actions/setup-go@v3
        with:
          go-version: '1.20'

      - id: 'run-linter'
        shell: 'bash'
        working-directory: '${{ runner.temp}}/abcxyz-pkg'
        run: 'go run ./cmd/terraform-linter ${GITHUB_WORKSPACE}'

      - name: 'Initialize and validate'
        shell: 'bash'
        working-directory: '${{ inputs.directory }}'
        run: |-
          TERRAFORM_DIRS="$(find . -name '*.tf' -printf "%h\n" | sort -u | tr '\n' ' ')"

          for DIR in ${TERRAFORM_DIRS}; do
            echo "::group::${DIR}"

            pushd "${DIR}" &>/dev/null
            terraform init -backend=false -input=false
            terraform validate
            popd &>/dev/null

            echo "::endgroup::"
          done
