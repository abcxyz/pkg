# Copyright 2025 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'multi-approvers'

on:
  workflow_call:
    inputs:
      # Path to a JSON file containing the members of the org. This should be
      # the full path that should work with the https://raw.githubusercontent.com/ prefix.
      # See the README for more.
      org-members-path:
        description: 'DEPRECATED: Use members-url with https://raw.githubusercontent.com/ prepeneded instead.'
        type: 'string'
      members-url:
        description: 'Full URL to JSON members file. URL must be publicly accessible.'
        type: 'string'
      local-members-path:
        description: 'Path to JSON members file. See README for more.'
        type: 'string'
      team:
        description: 'The GitHub org and team slug that should be used for determining external vs. internal users. Format is ${org}/${team-slug}.'
        type: 'string'
      multi-approvers-js-url:
        description: 'The URL to multi-approvers.js. This should typically not need to be set.'
        type: 'string'
        default: 'https://raw.githubusercontent.com/abcxyz/pkg/main/.github/workflows/multi-approvers.js'


permissions:
  # Needed to re-run approver checks (see the step named "Re-run approver checks").
  actions: 'write'
  # Needed to support the local-members-path input.
  contents: 'read'
  # Needed to support elevated permissions from Minty.
  id-token: 'write'
  # Need to read the pull request to get author and org data.
  pull-requests: 'read'

jobs:
  multi-approvers:
    if: |-
      contains(fromJSON('["pull_request", "pull_request_review"]'), github.event_name)
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Check inputs'
        shell: 'bash'
        run: |-
          if [[ -z "${{ inputs.org-members-path }}" &&
                -z "${{ inputs.members-url }}" &&
                -z "${{ inputs.local-members-path }}" &&
                -z "${{ inputs.team }}" ]]; then
            echo "Invalid inputs. One of org-members-path, members-url, local-members-path, or team must be set." 1>&2
            exit 1
          fi

      - name: 'Download members.json from org-members-path'
        id: 'download-members-json-path'
        if: |-
          ${{ inputs.org-members-path != '' }}
        run: |-
          MEMBERS_JSON="${RUNNER_TEMP}/${GITHUB_SHA:0:7}.members.json"

          # Download the file, passing in authentication to get a higher rate
          # limit: https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limits-for-requests-from-github-actions
          curl "https://raw.githubusercontent.com/${{ inputs.org-members-path }}" \
              --silent \
              --fail \
              --location \
              --header "Authorization: Token ${{ github.token }}" \
              --output "${MEMBERS_JSON}"

          # Save the result to an output.
          echo "::notice::Downloaded members.json to ${MEMBERS_JSON}"
          echo "output-file=${MEMBERS_JSON}" >> "${GITHUB_OUTPUT}"

      - name: 'Download members.json from members-url'
        id: 'download-members-json-url'
        if: |-
          ${{ inputs.members-url != '' }}
        run: |-
          MEMBERS_JSON="${RUNNER_TEMP}/${GITHUB_SHA:0:7}.members.json"

          # Download the file, passing in authentication to get a higher rate
          # limit: https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limits-for-requests-from-github-actions
          curl "${{ inputs.members-url }}" \
              --silent \
              --fail \
              --location \
              --header "Authorization: Token ${{ github.token }}" \
              --output "${MEMBERS_JSON}"

          # Save the result to an output.
          echo "::notice::Downloaded members.json to ${MEMBERS_JSON}"
          echo "output-file=${MEMBERS_JSON}" >> "${GITHUB_OUTPUT}"

      - name: 'Download multi-approvers.js'
        id: 'download-multi-approvers-js'
        run: |-
          MULTI_APPROVERS_JS="${RUNNER_TEMP}/${GITHUB_SHA:0:7}.multi-approvers.js"

          # Download the file, passing in authentication to get a higher rate
          # limit: https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limits-for-requests-from-github-actions
          curl "${{ inputs.multi-approvers-js-url }}" \
            --silent \
            --fail \
            --location \
            --header "Authorization: Token ${{ github.token }}" \
            --output "${MULTI_APPROVERS_JS}"

          # Save the result to an output.
          echo "::notice::Downloaded multi-approvers.js to ${MULTI_APPROVERS_JS}"
          echo "output-file=${MULTI_APPROVERS_JS}" >> "${GITHUB_OUTPUT}"

      - name: 'Authenticate to Google Cloud'
        id: 'minty-auth'
        if: |-
          ${{ inputs.team != '' }}
        uses: 'google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f' # ratchet:google-github-actions/auth@v2
        with:
          create_credentials_file: false
          export_environment_variables: false
          workload_identity_provider: '${{ vars.TOKEN_MINTER_WIF_PROVIDER }}'
          service_account: '${{ vars.TOKEN_MINTER_WIF_SERVICE_ACCOUNT }}'
          token_format: 'id_token'
          id_token_audience: '${{ vars.TOKEN_MINTER_SERVICE_AUDIENCE }}'
          id_token_include_email: true

      - name: 'Mint Token'
        id: 'mint-token'
        if: |-
          ${{ inputs.team != '' }}
        uses: 'abcxyz/github-token-minter/.github/actions/minty@main' # ratchet:exclude
        with:
          id_token: '${{ steps.minty-auth.outputs.id_token }}'
          service_url: '${{ vars.TOKEN_MINTER_SERVICE_URL }}'
          requested_permissions: |-
            {
              "scope": "actions-testing-multi-approvers",
              "repositories": ["actions-testing"],
              "permissions": {
                "members": "read",
                "pull_requests": "read"
              }
            }

      - name: 'Check approver requirements'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea' # ratchet:actions/github-script@v7
        with:
          retries: 3
          # Use the Minty token if it was generated, otherwise use the default.
          github-token: '${{ steps.mint-token.outputs.token || github.token }}'
          script: |-
            const membersPath = '${{ inputs.local-members-path || steps.download-members-json-path.outputs.output-file || steps.download-members-json-url.outputs.output-file }}';
            const orgTeam = '${{ inputs.team }}';
            // Warning: this should not be quoted to keep it as a number.
            const prNumber = ${{ github.event.pull_request.number }}
            const repoName = '${{ github.event.repository.name }}'
            const repoOwner = '${{ github.event.repository.owner.login }}'
            const {onPullRequest} = require('${{ steps.download-multi-approvers-js.outputs.output-file }}');
            await onPullRequest({
              orgTeam,
              membersPath,
              prNumber,
              repoName,
              repoOwner,
              github,
              core,
            });

      - name: 'Re-run approver checks'
        if: |-
          github.event_name == 'pull_request_review'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea' # ratchet:actions/github-script@v7
        with:
          retries: 3
          script: |-
            const branch = '${{ github.event.pull_request.head.ref }}'
            // Warning: this should not be quoted to keep it as a number.
            const prNumber = ${{ github.event.pull_request.number }}
            const repoName = '${{ github.event.repository.name }}'
            const repoOwner = '${{ github.event.repository.owner.login }}'
            const workflowRef = '${{ github.workflow_ref }}';
            const {onPullRequestReview} = require('${{ steps.download-multi-approvers-js.outputs.output-file }}');
            await onPullRequestReview({
              branch,
              prNumber,
              repoName,
              repoOwner,
              workflowRef,
              github,
            });
