# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Override Workflow Variables'
description: |-
  Use this action to load/override variables into GITHUB_ENV.

inputs:
  working_directory:
    description: 'The working directory to look for the env file.'
    required: false
    default: '.'
  env_filename:
    description: 'The YAML filename containing variables to override with.'
    required: false
    default: 'env.yml'
  find_in_parents:
    description: 'If true, search for env_filename in parents until one is found.'
    required: false
    default: 'false'
  top_level_directory:
    description: 'The top level directory to stop in when inheriting environment files.'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: 'Checkout'
      uses: 'actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744' # ratchet:actions/checkout@v3
      with:
        ref: '${{ github.event.repository.default_branch }}'

    - name: 'Load From Local File Only'
      if: |-
        !contains(fromJSON('["true", "True", "TRUE", "1", "T", "t"]'), inputs.find_in_parents)
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        WORKING_DIRECTORY: '${{ inputs.working_directory }}'
        ENV_FILENAME: '${{ inputs.env_filename }}'
        TOP_LEVEL_DIRECTORY: '${{ inputs.top_level_directory || github.workspace }}'
      run: |-
        WORKING_DIRECTORY=$(realpath "${WORKING_DIRECTORY}")

        if [[ ! -f "$ENV_FILENAME" ]]; then
            echo "ERROR: Failed to find target file ${ENV_FILENAME} in ${WORKING_DIRECTORY}"
            exit 1
        fi

        PROPS=$(yq -o=props '.. | select(tag != "!!map" and tag != "!!seq") | ( (path | join("_")) + "<<EOT\n" + . + "\nEOT")' "${ENV_FILENAME}")

        for PROP in "${PROPS}"; do
            echo "${PROP}" >> $GITHUB_ENV
        done

    - name: 'Load From Local Or Parents'
      if: |-
        contains(fromJSON('["true", "True", "TRUE", "1", "T", "t"]'), inputs.find_in_parents)
      shell: 'bash'
      working-directory: '${{ inputs.working_directory }}'
      env:
        WORKING_DIRECTORY: '${{ inputs.working_directory }}'
        ENV_FILENAME: '${{ inputs.env_filename }}'
        TOP_LEVEL_DIRECTORY: '${{ inputs.top_level_directory || github.workspace }}'
      run: |-
        WORKING_DIRECTORY=$(realpath "${WORKING_DIRECTORY}")
        TOP_LEVEL_DIRECTORY=$(realpath "${TOP_LEVEL_DIRECTORY}")

        if [[ "${WORKING_DIRECTORY}" != "${TOP_LEVEL_DIRECTORY}"* ]]; then
          echo "ERROR: ${TOP_LEVEL_DIRECTORY} is not a sub-directory of ${WORKING_DIRECTORY}"
          exit 1
        fi

        echo -n "Checking ${WORKING_DIRECTORY} for ${ENV_FILENAME}..."
        if [[ ! -f "$ENV_FILENAME" ]]; then
          echo "MISSING"

          while [[ "${WORKING_DIRECTORY}" != "/"  ]]; do
            WORKING_DIRECTORY=$(dirname "${WORKING_DIRECTORY}")
            cd "${WORKING_DIRECTORY}"

            echo -n "Checking ${WORKING_DIRECTORY} for ${ENV_FILENAME}..."
            if [ -f "${ENV_FILENAME}" ]; then
              echo "FOUND"
              break
            fi

            echo "MISSING"

            if [[ "${WORKING_DIRECTORY}" == "${TOP_LEVEL_DIRECTORY}" ]]; then
              echo "ERROR: Failed to find target file ${ENV_FILENAME}"
              exit 1
            fi
          done
        fi

        PROPS=$(yq -o=props '.. | select(tag != "!!map" and tag != "!!seq") | ( (path | join("_")) + "<<EOT\n" + . + "\nEOT")' "${ENV_FILENAME}")

        for PROP in "${PROPS}"; do
          echo "${PROP}" >> $GITHUB_ENV
        done
