# Copyright 2024 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This GitHub Action creates a Git tag and associated GitHub Release at the current SHA.
#
# It includes two outputs: the "current_version" and the "next_version".
#
# Example usage:
#
#     jobs:
#       release:
#         runs-on: 'ubuntu-latest'
#
#         # The following line is super super super important! This ensures the
#         # job only runs when the commit matches the expected author and
#         # message. There are additional checks in the action itself, including
#         # commit signature verification, but adding this line prevents the
#         # workflow from running at all, saving your previous GitHub Actions
#         # usage minutes.
#         if: '${{ startsWith(github.event.head_commit.message, ''Release: v'') && github.event.head_commit.author.email == ''user_or_bot@company.com'' }}'
#
#         steps:
#           - name: 'Create release'
#             id: 'create-release'
#             uses: 'abcxyz/pkg/.github/actions/create-release@main'
#             with:
#               github_token: '${{ secrets.GITHUB_TOKEN }}' # Or an organization PAT
#
#           # Example using go-releaser
#           - uses: 'actions/checkout@v4'
#             with:
#               fetch-depth: 0
#
#           - uses: 'actions/setup-go@v5'
#             with:
#               go-version: '1.21'
#
#           - uses: 'goreleaser/goreleaser-action@v5'
#             with:
#               args: 'release --clean'
#             env:
#               GORELEASER_CURRENT_TAG: 'v${{ steps.create-release.outputs.release_version }}'
#               GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}' # Or an organization PAT
#

name: 'create-release'

inputs:
  github_token:
    description: |-
      GitHub PAT or App Token to use for authentication.
    type: 'string'
    required: true

  draft:
    description: |-
      Create the release as a draft.
    type: 'boolean'
    required: false
    default: false

outputs:
  release_version:
    description: |-
      Version that is being released, without a leading "v".
    value: '${{ steps.create-release.outputs.release_version }}'

runs:
  using: 'composite'
  steps:
    - name: 'Create release'
      id: 'create-release'
      env:
        DRAFT: '${{ inputs.draft }}'
      uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea' # ratchet:actions/github-script@v7
      with:
        github-token: '${{ inputs.github_token }}'
        script: |-
          // Ensure the commit is signed.
          const commitResult = await github.rest.repos.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.head_commit.id,
          })
          if (!commitResult.data.commit.verification.verified) {
            core.setFailed(`Commit is not signed`)
            return;
          }

          // Ensure the commit message matches the expected regular
          // expression. Part of this is guarded by the conditional
          // entrypoint.
          const matches = context.payload.head_commit.message.match(/Release: v(?<version>[^\ ]+)/i);
          if (!matches || !matches.groups) {
            core.setFailed(`Commit message does not contain a version`)
            return;
          }
          let releaseVersion = matches.groups.version;
          while(releaseVersion.charAt(0).toLowerCase() === 'v') {
            releaseVersion = releaseVersion.substr(1);
          }

          // Compute variables.
          const tag = `v${releaseVersion}`;
          const draft = JSON.parse(process.env.DRAFT);
          const prerelease = ['-', 'pre', 'alpha', 'beta', 'preview'].some((v) => tag.includes(v));

          try {
            const createReleaseRequest = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              target_commitish: context.sha,
              name: tag,
              generate_release_notes: true,
              prerelease: prerelease,
              draft: draft,
            };

            const response = await github.rest.repos.createRelease(createReleaseRequest);

            core.setOutput('release_version', releaseVersion);
            core.info(
              `Created release ${response.data.name} at ${response.data.html_url}`
            );
          } catch (err) {
            core.setFailed(`Failed to create release: ${err}`);
          }
