# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup Binary'

description: |-
  Use this action to install and cache a binary for use within a GitHub workflow.

inputs:
  download_url:
    description: 'The download URL for the binary. This must be of the format https://...'
    required: true
  install_path:
    description: 'The path on disk in which to install the binary (defaults to the current directory). This includes the folder and binary name (e.g. /path/to/my/binary). This action does not modify $PATH; if you want the binary to be accessible, make sure the parent folder is in $PATH.'
    default: '.'
    required: false
  cache_key:
    description: 'The cache key to use when caching the downloaded binary. If this value is empty, caching will be disabled.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Validate inputs'
      shell: 'bash'
      env:
        DOWNLOAD_URL: '${{ inputs.download_url }}'
      run: |
        # Validate inputs
        errors=false

        if [[ -z "${DOWNLOAD_URL}" ]]; then
            errors=true
            echo "::error ::download_url is a required input"
        elif [[ "${DOWNLOAD_URL}" != https://* ]]; then
            errors=true
            echo "::error ::download_url must start with https://..."
        fi

        if [ "$errors" = true ]; then
          exit 1
        fi

    - name: 'Restore cache binary'
      id: 'cache-binary'
      if: |
        inputs.cache_key != ''
      uses: 'actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8' # ratchet:actions/cache/restore@v3
      with:
        path: '${{ inputs.install_path }}'
        key: 'setup-binary-${{ inputs.cache_key }}'

    - name: 'Create install path'
      if: |
        steps.cache-binary.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        INSTALL_PATH: '${{ inputs.install_path }}'
      run: |-
        # Create install path
        if [ ! -d "${INSTALL_PATH}" ]; then
          echo "Creating install path: ${INSTALL_PATH}..."
          mkdir "${INSTALL_PATH}"
        fi

    - name: 'Download binary'
      if: |
        steps.cache-binary.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        INSTALL_PATH: '${{ inputs.install_path }}'
        DOWNLOAD_URL: '${{ inputs.download_url }}'
      run: |-
        # Download binary
        cd "${INSTALL_PATH}"
        curl -sSL -o "setup-binary-artifact" "${DOWNLOAD_URL}"

    - name: 'Extract'
      if: |
        steps.cache-binary.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        INSTALL_PATH: '${{ inputs.install_path }}'
        DOWNLOAD_URL: '${{ inputs.download_url }}'
      run: |-
        # Extract binary
        cd "${INSTALL_PATH}"

        if [[ "${DOWNLOAD_URL}" == *.tar || "${DOWNLOAD_URL}" == *.gz ]]
        then
          tar -xzvf setup-binary-artifact
        elif [[ "${DOWNLOAD_URL}" == *.zip ]]
        then
          unzip -o setup-binary-artifact
        else
          echo "::error ::unknown file extension provided: ${DOWNLOAD_URL}"
          exit 1
        fi

    - name: 'Save cache binary'
      if: |
        inputs.cache_key != '' && steps.cache-binary.outputs.cache-hit != 'true'
      uses: 'actions/cache/save@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8' # ratchet:actions/cache/save@v3
      with:
        path: '${{ inputs.install_path }}'
        key: 'setup-binary-${{ inputs.cache_key }}'
