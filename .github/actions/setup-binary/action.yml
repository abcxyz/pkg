# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup Binary'

description: |-
  Use this action to install and cache a binary for use within a GitHub workflow.

inputs:
  install_dir:
    description: 'The directory to install the binary.'
    required: true
  download_url:
    description: 'The download URL for the binary to install.'
    required: true
  file_ext:
    description: 'The type of file. Allowed values: tar, zip, tgz, none'
    default: 'tgz'
    required: false
  enable_cache:
    description: 'Enable the use of caching for the binary.'
    default: 'false'
    required: false
  cache_key:
    description: 'The URL of the binary to download.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Restore cache binary'
      id: 'cache-binary'
      if: |
        contains(fromJSON('["true", "True", "TRUE", "1", "T", "t"]'), inputs.enable_cache)
      uses: 'actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8' # ratchet:actions/cache/restore@v3
      with:
        path: '${{ inputs.install_dir }}'
        key: '${{ inputs.cache_key }}'

    - name: 'Download binary'
      if: |
        steps.cache-binary.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        INSTALL_DIR: '${{ inputs.install_dir }}'
        DOWNLOAD_URL: '${{ inputs.download_url }}'
      run: |-
        mkdir "${INSTALL_DIR}"
        cd "${INSTALL_DIR}"
        curl -sSL -o "setup-binary" "${DOWNLOAD_URL}"

    - name: 'Extract'
      if: |
        steps.cache-binary.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        INSTALL_DIR: '${{ inputs.install_dir }}'
        EXT: '${{ inputs.file_ext }}'
      run: |-
        cd "${INSTALL_DIR}"

        if [[ "${EXT}" = "tar" ]]; then
          tar -xvf setup-binary
        elif [[ "${EXT}" = "tga" ]]; then
          tar -xvzf setup-binary
        elif [[ "${EXT}" = "zip" ]]; then
          unzip setup-binary
        fi

    - name: 'Save cache binary'
      if: |
        contains(fromJSON('["true", "True", "TRUE", "1", "T", "t"]'), inputs.enable_cache) &&
        steps.cache-binary.outputs.cache-hit != 'true'
      uses: 'actions/cache/save@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8' # ratchet:actions/cache/save@v3
      with:
        path: '${{ inputs.install_dir }}'
        key: '${{ steps.cache-binary.outputs.cache-primary-key }}'

    - name: 'Add binary to path'
      shell: 'bash'
      env:
        INSTALL_DIR: '${{ inputs.install_dir }}'
      run: |-
        echo "${INSTALL_DIR}" >> $GITHUB_PATH
