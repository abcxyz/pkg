# Copyright 2023 The Authors (see AUTHORS file)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup Binary'

description: |-
  Use this action to install and cache a binary for use within a GitHub workflow. This action wraps the functionality of go-getter to provide advanced download and checksum capabilities.

inputs:
  download_url:
    description: 'The download URL for the binary. This must a valid go-getter URL. See https://github.com/hashicorp/go-getter#url-format'
    required: true
  install_path:
    description: 'The path on disk in which to extract the binary, this cannot be equal to the current directory. Set `add_to_path` to true to add this to the $PATH.'
    required: true
  binary_subpath:
    description: 'The subpath to the binary relative to the install path. This should include the binary name (e.g. dist/binary-name). Required to set the binary as executable and for renaming.'
    required: true
  checksum:
    description: 'The checksum for the downloaded artifact. See https://github.com/hashicorp/go-getter#checksumming'
    required: false
  cache_key:
    description: 'The cache key to use when caching the downloaded binary. If this value is empty, caching will be disabled.'
    required: false
  add_to_path:
    description: 'Add the install_path to the $PATH variable.'
    default: 'false'
    required: false
  destination_subpath:
    description: 'The destination subpath of the binary relative to the install path. This should include the binary name (e.g. dist/binary-name) and is useful for renaming the binary after download.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Validate inputs'
      shell: 'bash'
      env:
        DOWNLOAD_URL: '${{ inputs.download_url }}'
        INSTALL_PATH: '${{ inputs.install_path }}'
        BINARY_SUBPATH: '${{ inputs.binary_subpath }}'
      run: |
        # Validate inputs
        errors=false

        if [[ -z "${DOWNLOAD_URL}" ]]; then
          errors=true
          echo "::error ::download_url is a required input"
        fi

        if [[ -z "${INSTALL_PATH}" ]]; then
          errors=true
          echo "::error ::install_path is a required input"
        elif [[ "${INSTALL_PATH}" == "." || "${INSTALL_PATH}" == "${GITHUB_WORKSPACE}" ]]; then
          errors=true
          echo "::error ::install_path is a required input"
        fi

        if [[ -z "${BINARY_SUBPATH}" ]]; then
          errors=true
          echo "::error ::binary_subpath is a required input"
        fi

        if [ "$errors" = true ]; then
          exit 1
        fi

    - name: 'Restore cache binary'
      id: 'cache-binary'
      if: |
        inputs.cache_key != ''
      uses: 'actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf' # ratchet:actions/cache/restore@v4
      with:
        path: '${{ inputs.install_path }}'
        key: 'setup-binary-${{ inputs.cache_key }}'

    - name: 'Install hashicorp/go-getter'
      id: 'go-getter'
      if: |
        steps.cache-guardian.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        GOGETTER_VERSION: '1.7.8'
        GH_TOKEN: '${{ github.token }}'
      run: |-
        # Create a unique output file outside of the checkout.
        TEMP_DIR="${RUNNER_TEMP}/go-getter-${GITHUB_SHA:0:7}"

        if [[ -f "${TEMP_DIR}/go-getter*" ]]; then
          echo "::notice::Skipping go-getter installation (already installed)"
          echo "path=${TEMP_DIR}" >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        OS=""
        if [[ "${RUNNER_OS}" == "Linux" ]]; then
          OS="linux"
        elif [[ "${RUNNER_OS}" == "macOS" ]]; then
          OS="darwin"
        elif [[ "${RUNNER_OS}" == "Windows" ]]; then
          OS="windows"
        else
          echo "::error::Unsupported operating system ${RUNNER_OS}"
          exit 1
        fi

        ARCH=""
        if [[ "${RUNNER_ARCH}" == "X64" ]]; then
          ARCH="amd64"
        elif [[ "${RUNNER_ARCH}" == "ARM64" ]]; then
          ARCH="arm64"
        else
          echo "::error::Unsupported system architecture ${RUNNER_ARCH}"
          exit 1
        fi

        # Download the file
        mkdir -p "${TEMP_DIR}" && cd "${TEMP_DIR}"
        gh --repo hashicorp/go-getter release download \
          --pattern "go-getter_${GOGETTER_VERSION}_${OS}_${ARCH}.zip" \
          --clobber \
          --output "go-getter.zip"

        # Unzip
        unzip "go-getter.zip"

        # Save the result to an output.
        echo "::notice::Downloaded binary to ${TEMP_DIR}"
        echo "path=${TEMP_DIR}" >> "${GITHUB_OUTPUT}"

    - name: 'Download binary'
      if: |
        steps.cache-binary.outputs.cache-hit != 'true'
      shell: 'bash'
      env:
        GOGETTER_PATH: '${{ steps.go-getter.outputs.path }}'
        INSTALL_PATH: '${{ inputs.install_path }}'
        DOWNLOAD_URL: '${{ inputs.download_url }}'
        CHECKSUM: '${{ inputs.checksum }}'
      run: |-
        # Download binary
        if [[ ! -z "${CHECKSUM}" ]]; then
          SEPARATOR="?"
          if [[ "" == *"?"* ]]; then
            SEPARATOR="&"
          fi

          DOWNLOAD_URL="${DOWNLOAD_URL}${SEPARATOR}checksum=${CHECKSUM}"
        fi

        "${GOGETTER_PATH}/go-getter" "${DOWNLOAD_URL}" "${INSTALL_PATH}"

    - name: 'Save cache binary'
      if: |
        inputs.cache_key != '' && steps.cache-binary.outputs.cache-hit != 'true'
      uses: 'actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf' # ratchet:actions/cache/save@v4
      with:
        path: '${{ inputs.install_path }}'
        key: 'setup-binary-${{ inputs.cache_key }}'

    - name: 'Change to destination subpath'
      if: |
        inputs.destination_subpath != ''
      shell: 'bash'
      working-directory: '${{ inputs.install_path }}'
      env:
        BINARY_SUBPATH: '${{ inputs.binary_subpath }}'
        DESTINATION_SUBPATH: '${{ inputs.destination_subpath }}'
      run: |-
        mv ${BINARY_SUBPATH} ${DESTINATION_SUBPATH}

    - name: 'Add binary to path'
      if: |
        contains(fromJSON('["true", "True", "TRUE", "1", "T", "t"]'), inputs.add_to_path)
      shell: 'bash'
      env:
        INSTALL_PATH: '${{ inputs.install_path }}'
        BINARY_SUBPATH: '${{ inputs.binary_subpath }}'
        DESTINATION_SUBPATH: '${{ inputs.destination_subpath }}'
      run: |-
        if [[ -n "${DESTINATION_SUBPATH}" ]]; then
          BINARY_SUBPATH=${DESTINATION_SUBPATH}
        fi
        BINARY_DIR=$(dirname ${INSTALL_PATH}/${BINARY_SUBPATH})
        echo "Adding ${BINARY_DIR} to PATH"
        echo "${BINARY_DIR}" >> $GITHUB_PATH

    - name: 'Mark binary as executable'
      shell: 'bash'
      env:
        INSTALL_PATH: '${{ inputs.install_path }}'
        BINARY_SUBPATH: '${{ inputs.binary_subpath }}'
        DESTINATION_SUBPATH: '${{ inputs.destination_subpath }}'
      run: |-
        if [[ -n "${DESTINATION_SUBPATH}" ]]; then
          BINARY_SUBPATH=${DESTINATION_SUBPATH}
        fi
        chmod +x ${INSTALL_PATH}/${BINARY_SUBPATH}
